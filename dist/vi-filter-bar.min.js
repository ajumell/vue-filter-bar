var visitorModal=Vue.component("vi-filter-bar",{props:["options"],data:()=>({_availableFilters:null,filters:[],numberOfAvailableProperties:0,collapsed:!1}),methods:{//i.o.
addFilter(){let a=this;a.filters.push({_availableFilters:a._availableFilters,filterProperty:null,filterPropertyLabel:null,filterValue:null,filterValueLabel:null,filterRequired:!1,selectionMode:"single",delimiter:",",getFilterFunction:a.getFilter,getAvailableFilterProperties:a.getAvailableFilterProperties})},addRequiredFilter(a){let b=this,c=b.getFilter(a);b.filters.push({_availableFilters:b._availableFilters,filterProperty:c.filterProperty,filterPropertyLabel:c.label,filterValue:b.getDefaultValue(c.label).filterValue||null,filterValueLabel:b.getDefaultValue(c.label).label||null,filterRequired:!0,delimiter:c.delimiter||",",selectionMode:c.selectionMode||"single",getFilterFunction:b.getFilter,getAvailableFilterProperties:()=>!1}),b.filerPropertyInUse({old:null,new:c.label})},getDefaultValue(a){let b=this.getFilter(a);if("single"==b.selectionMode){//Search for default value
for(value of b.values)if(value.default)return value;//If no default value was found, the first element would be taken as a default.
return b.values[0]}return!1},//Delete an Filter from the filters array
deleteFilter(a){let b=this,c=[];//delete filter from filters array.
for(filter of b.filters)filter.filterProperty==a?filter.status=1:c.push(filter);//override filters array with temp array.
b.filters=c,null!=a&&b.getAvailableFilterProperties()},//Mark filter property as in use
filerPropertyInUse(a){let b=this,c=a.old,d=a.new,e=b.getFilter(d);//newFilter.required = false;
if(e.status=0,c){let a=b.getFilter(c);//set status to 'available'
a.status=1}},//This request returns a list of available (not in use) filters
getAvailableFilterProperties(){let a=this,b=[];for(property of a._availableFilters)0<property.status&&b.push(property.label);return 0<b.length?(a.propsAvailable=!0,a.numberOfAvailableProperties=b.length,b):(a.propsAvailable=!1,a.deleteFilter(null),a.numberOfAvailableProperties=0,!1)},//Returns the filter object from the _availableFilters property
getFilter(a){if(null!=a){let b=this;for(property of b._availableFilters)if(a==property.label)return property}else return!1},triggerCallback(){let a=this;a.options.uri=a.uri,a.$emit("trigger-callback",a.options.uri)},toggleCoppapse(){let a=this;a.collapsed=!a.collapsed,console.log(a.collapsed)}},computed:{uri(){let a=this,b="";for(filter of a.filters)null!=filter.filterProperty&&null!=filter.filterValue&&(//build uri string from filter property and value
b+="&"+filter.filterProperty+"="+filter.filterValue);return b.slice(1,b.length)}},created:async function(){let a=this;//Copy filters array and add status property
a._availableFilters=a.options.filters;for(filter of a._availableFilters)filter.status=1,filter.required&&a.addRequiredFilter(filter.label);a.getAvailableFilterProperties()},template:`
    <div class="vi-filter-bar">
        <div class="collapse-toggle">
            <button v-if="!collapsed" type="button" class="btn" v-on:click="toggleCoppapse()"><img class="clickable" src="./assets/collapse-close.png" width="15" height="15"></button>
            <button v-if="collapsed" type="button" class="btn" v-on:click="toggleCoppapse()"><img class="clickable" src="./assets/collapse-open.png" width="15" height="15"></button>
        </div>    
        
        <h5>Filter options</h5>
        
        <table v-if="!collapsed">
            <tr>
                <td v-for="filter in filters">
                    <vi-filter v-bind:filter="filter" v-on:filter-delete="deleteFilter($event)" v-on:filter-property-selected="filerPropertyInUse($event)"></vi-filter>
                </td>
                <td class="left"></td>
                <td>
                    <div v-if="true">
                        <button type="button" class="btn" v-on:click="addFilter()"><img class="clickable" src='./assets/add.png' width="20" height="20"> ({{numberOfAvailableProperties}})</button>
                    </div>
                    
                </td>
                <td>
                    <button type="button" class="btn" v-on:click="triggerCallback()"><img class="clickable" src='./assets/reload.png' width="20" height="20"></button>
                </td>
            </tr>            
            
                
        </table>
        <p class="mono">{{uri}}</p>
    </div> 
    `}),visitorModal=Vue.component("vi-filter",{props:["filter"],data:()=>({availableProperties:[]}),methods:{requestAvailableProperties(){let a=this;a.availableProperties=a.filter.getAvailableFilterProperties()},setFilterProperty(a){let b=this;//overrides filter Value
b.filter.filterValue=null,b.filter.filterValueLabel=null;//get propertyValue for the given property label
let c=b.filter.getFilterFunction(a),d=b.filter.filterPropertyLabel;//Rebuild properties
b.filter.filterProperty=c.filterProperty,b.filter.filterPropertyLabel=c.label,b.filter.selectionMode=c.selectionMode,b.$emit("filter-property-selected",{old:d,new:b.filter.filterPropertyLabel}),b.requestAvailableProperties()},deleteFilter(){let a=this,b=a.filter.getFilterFunction(a.filter.filterPropertyLabel);b&&(b.status=1),this.$emit("filter-delete",a.filter.filterProperty)}},computed:{},mounted:async function(){this;//vm.requestAvailableProperties();
/*if(vm.filter.selectionMode == 'multiple'){
            //handle default value fur mulitple filter
            let values = vm.getValues(vm.filter.filterPropertyLabel);
            
            for(value of values){
                if(value.default){
                    checkboxClick(value.filterValue, value.label);
                }
            }
        }*/},template:`
    <div class="vi-filter">
        <table>
            <tr>
                <td class="left">
                    <div class="btn-group m-1">
                        <button class="btn btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" v-on:click="requestAvailableProperties()">
                            {{filter.filterPropertyLabel}}
                        </button>
                        <div class="dropdown-menu" >
                            <a class="dropdown-item clickable" v-for="prop in availableProperties" v-on:click="setFilterProperty(prop)">{{prop}}</a>
                        </div>
                    </div>
                </td>
                <td>
                    <div class="btn-group m-1" >

                        <vi-single-filter v-bind:filter="filter" v-if="filter.selectionMode == 'single'"></vi-single-filter>

                        <vi-multi-filter v-bind:filter="filter" v-if="filter.selectionMode == 'multiple'"></vi-multi-filter>

                        <vi-search-filter v-bind:filter="filter" v-if="filter.selectionMode == 'search'"></vi-search-filter>
                        
                    </div>
                </td>
                <td v-if="!filter.filterRequired">
                    <img class="clickable" src='./assets/delete.png' width="15" height="15" v-on:click="deleteFilter()">
                </td>
            </tr>
        </table>

    </div> 
    `}),visitorModal=Vue.component("vi-multi-filter",{props:["filter"],data:()=>({availableProperties:[],//delimiter: ';',
checked:[],dropdownTitle:"none"}),methods:{apply(){let a=this;setTimeout(function(){console.log("multi-filter has been applied"),console.log(a.checked),a.dropdownTitle=1<a.checked.length?"multiple":1>a.checked.length?"none":a.checked[0].label;//concat filter values
let b="";for(value of a.checked)b+=value.filterValue,value!==a.checked[a.checked.length-1]&&(b+=a.filter.delimiter);a.filter.filterValue=b},0)},getValues(a){let b=this;if(null!=a){let c=b.filter.getFilterFunction(a);return c.values}return[]},setFilterValue(a,b){let c=this;c.filter.filterValue=a,c.filter.filterValueLabel=b},checkboxClick(a,b){let c=this;if(null!=c.filter.filterValue){let b=c.filter.filterValue.split(c.delimiter),d=b.indexOf(a);//check if the filter is already checked - if so the filter must be removed
if(-1<d){//filter is already set and has to be removed.
let d=[];for(i of b)i!=a&&""!=i&&d.push(i);b=d;let e="";for(i of b)e+=c.delimiter+i;c.filter.filterValue=e.substring(1)}else c.filter.filterValue+=c.delimiter+a,c.filter.filterValueLabel="Multi"}else c.filter.filterValue=a,c.filter.filterValueLabel=b;","==c.filter.filterValue.substring(0,1)&&(c.filter.filterValue=c.filter.filterValue.substring(1))}},computed:{},mounted:async function(){this;//vm.requestAvailableProperties();
//defult values
/*
        let filter = vm.filter.getFilterFunction(vm.filter.filterPropertyLabel)
        
        for(value of filter.values){
            if(value.default){
                vm.checked.push({
                    label : value.label,
                    filterValue : value.filterValue
                })
            }
        }*/},template:`
    <div class="vi-multi-filter">
        <button class="btn btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            {{dropdownTitle}}
        </button>
        <div class="dropdown-menu" v-if="filter.selectionMode == 'multiple'">
            <h6 class="dropdown-header">{{filter.filterProperty}}</h6>
            <div class="form-group" >
                <div class="form-check" v-for="v in getValues(filter.filterPropertyLabel)" >
                    <input class="form-check-input" type="checkbox" v-bind:value="v" v-model="checked" v-on:click="apply(v)">
                    <label class="form-check-label">
                        {{v.label}}
                    </label>
                </div>
            </div>
        </div>
    </div> 

        
    `}),visitorModal=Vue.component("vi-search-filter",{props:["filter"],data:()=>({searchString:""}),methods:{},watch:{searchString:function(){let a=this;//vm.filter.filterValue = vm.searchString.split(" ").join("%20");
//vm.filter.filterValue = vm.filter.filterValue.split("/").join("%2F");
a.filter.filterValue=encodeURIComponent(a.searchString),console.log("searchString changed"),1>this.searchString.length&&(a.filter.filterValue=null)}},computed:{},mounted:async function(){this;//vm.requestAvailableProperties();
},template:`
    <div class="vi-single-filter">
        
        <label for="exampleInputEmail1">{{filter.filterValueLabel}}</label>
        <input type="text" class="form-control-sm" id="exampleInputEmail1" v-model="searchString" aria-describedby="search" >
        
    </div> 
    `}),visitorModal=Vue.component("vi-single-filter",{props:["filter"],data:()=>({}),methods:{apply(){vm.$emit("filter-apply")},getValues(a){let b=this;if(null!=a){let c=b.filter.getFilterFunction(a);return c.values}return[]},setFilterValue(a,b){let c=this;c.filter.filterValue=a,c.filter.filterValueLabel=b}},computed:{},mounted:async function(){this;//vm.requestAvailableProperties();
},template:`
    <div class="vi-single-filter">
        <button class="btn btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            {{filter.filterValueLabel}}
        </button>

        <div class="dropdown-menu" >      
            <h6 class="dropdown-header">{{filter.filterProperty}}</h6>
            <a class="dropdown-item clickable" v-for="value in getValues(filter.filterPropertyLabel)" v-on:click="setFilterValue(value.filterValue, value.label)">{{value.label}}</a>
        </div>
    </div> 
    `});
//# sourceMappingURL=vi-filter-bar.min.js.map
